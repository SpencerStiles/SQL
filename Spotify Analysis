# For this project, I downloaded Spotify information from Kaggle.
# Then I made a table to put that information into.
# Finally, I analyzed the data using SQL.

# Creating the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# Here I inserted the data into the table

# Next, I explored the data using the following SQL:

# First I determined which artists had the most popular songs on average

SELECT artist_name, AVG(popularity) as avg_popularity
FROM BIT_DB.spotifydata
GROUP BY artist
ORDER BY avg_popularity DESC
LIMIT 10;

# Next I looked to see if the highest 'danceability' songs also had high energy and loudness values

SELECT track_name, danceability, energy, loudness
FROM BIT_DB.spotifydata
ORDER BY danceability desc
LIMIT 20;

# Here I use a CTE (common table expression) to find the average popularity, and then query that table to find the highest popularity artists.

with popularity_average_CTE as (
  SELECT artist_name, AVG(popularity) as avg_popularity
  FROM BIT_DB.spotifydata
  GROUP BY artist_name
  HAVING avg_popularity >= 90
)

SELECT artist_name, avg_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
